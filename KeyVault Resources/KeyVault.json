{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "keyVaultNamePrefix": {
      "type": "string",
      "minLength": 3,
      "maxLength": 12,
      "metadata": {
        "description": "The prefix for the key vault that will be created, elements of the resource group id will be added to this name to ensure uniqueness"
      }
    },
    "keyVaultTenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault - defaults to the tenant ID for the subscription the resource is deployed into."
      }
    },
    "keyVaultSku": {
      "type": "string",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "The sku for the key vault that will be created."
      }
    },
    "accessPolicies": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID"
      }
    },
    "enabledForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault"
      }
    },
    "enabledForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "createMode": {
      "type": "string",
      "defaultValue": "default",
      "allowedValues": [
        "default",
        "recover"
      ],
      "metadata": {
        "description": "The vault's create mode to indicate whether the vault need to be recovered or not"
      }
    },
    "enableSoftDelete": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Property to specify whether the 'soft delete' functionality is enabled for this key vault"
      }
    },
    "keyVaultTags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "An object containing tags that should be added to the resource."
      }
    },
    "deploymentLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The Azure location that the resource should be deployed into. Defaults to the location of the resource group."
      }
    },
    "nestedDeploymentsUrlBase": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/clawrenceks/Azure-Resource-Manager-Shared-Templates/master/",
      "metadata": {
        "description": "The base URL of the location hosting the nested ARM templates used by this template."
      }
    }
  },
  "variables": {
  },
  "resources": [
    {
      "name": "[concat('Deploy-Key-Vault-', parameters('keyVaultNamePrefix'),'With-Soft-Delete-Disabled')]",
      "condition": "[equals(parameters('enableSoftDelete'), false)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-09-01",
      "dependsOn": [
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('nestedDeploymentsUrlBase'),'KeyVault%20Resources/Master%20Templates/','KeyVaultWithSoftDeleteDisabled.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultNamePrefix": {
            "value": "[parameters('keyVaultNamePrefix')]"
          },
          "keyVaultTenantId": {
            "value": "[parameters('keyVaultTenantId')]"
          },
          "keyVaultSku": {
            "value": "[parameters('keyVaultSku')]"
          },
          "accessPolicies": {
            "value": "[parameters('accessPolicies')]"
          },
          "enabledForDeployment": {
            "value": "[parameters('enabledForDeployment')]"
          },
          "enabledForDiskEncryption": {
            "value": "[parameters('enabledForDiskEncryption')]"
          },
          "enabledForTemplateDeployment": {
            "value": "[parameters('enabledForTemplateDeployment')]"
          },
          "createMode": {
            "value": "[parameters('createMode')]"
          },
          "keyVaultTags": {
            "value": "[parameters('keyVaultTags')]"
          },
          "deploymentLocation": {
            "value": "[parameters('deploymentLocation')]"
          }
        }
      }
    },
    {
      "name": "[concat('Deploy-Key-Vault-', parameters('keyVaultNamePrefix'),'With-Soft-Delete-Enabled')]",
      "condition": "[equals(parameters('enableSoftDelete'),'true')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-09-01",
      "dependsOn": [
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('nestedDeploymentsUrlBase'),'KeyVault%20Resources/Master%20Templates/','KeyVaultWithSoftDeleteEnabled.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultNamePrefix": {
            "value": "[parameters('keyVaultNamePrefix')]"
          },
          "keyVaultTenantId": {
            "value": "[parameters('keyVaultTenantId')]"
          },
          "keyVaultSku": {
            "value": "[parameters('keyVaultSku')]"
          },
          "accessPolicies": {
            "value": "[parameters('accessPolicies')]"
          },
          "enabledForDeployment": {
            "value": "[parameters('enabledForDeployment')]"
          },
          "enabledForDiskEncryption": {
            "value": "[parameters('enabledForDiskEncryption')]"
          },
          "enabledForTemplateDeployment": {
            "value": "[parameters('enabledForTemplateDeployment')]"
          },
          "createMode": {
            "value": "[parameters('createMode')]"
          },
          "keyVaultTags": {
            "value": "[parameters('keyVaultTags')]"
          },
          "deploymentLocation": {
            "value": "[parameters('deploymentLocation')]"
          }
        }
      }
    }
  ],
  "outputs": {
  }
}